文字编码

Qus.
编码: 一个字符在内存中的表示。也叫内码
字符集: 包含的字符的集合. 每种字符集可能有多种编码方式
计算机内存中存储的字符用什么编码
如何确定一个字符
Linux 下utf8 中英文如何在机子中储存
utf8 utf16 有何不同
  utf8,utf16 都是Unicode 表示编码方式 

函数工具

c++std string 不能发现中文字符
e.g. str="ni日" str[2] 不对

UCS 通用字符集
是所有其他字符集的一个超集，他保证于其他
字符集是双向兼容的。
UCS 中每个字符的编码都是31位的
UCS 现在由两种格式
UCS-2 两个字节编码
UCS-4 四个字节编码 (031)

Unicode 
每个字符在Unicde中的对应一个编号
每个编号都是两字节的。


Unicde 的内码是 UCS-2
UTF-8 是UCS-2 的实现方式

UCS 和 Unicde的关系
UCS 是ISO 制定的标准
而 Unicode 是多家公司制定的
最终两者统一了. 规定字符码空间为一百一十万
所以现在两者是统一的了。也就是可以相互指代


UTF = UCS transformation format UCS 转换格式
将Unicode编码和计算机实际编码对应起来的一个规则

UTF-8就是以8位为单元对UCS进行编码。从UCS-2到UTF-8的编码方式如下：
对于UTF-8来说最重要的是 每个字节的前两位
UCS-2编码(16进制) 	UTF-8 字节流(二进制)
0000 - 007F 	0xxxxxxx
0080 - 07FF 	110xxxxx 10xxxxxx          B0 80 以B或B以上开头 
0800 - FFFF 	1110xxxx 10xxxxxx 10xxxxxx E0 80 以E或B以上开头  
......
                1111110x


按照UTF-8标准，
 使用1到6个字节
（1）所有以0开始的字节，都与原来的ASCII码兼容，也就是说，0xxxxxxx不需要额外转换，就是我们平时用的ASCII码。

（2）所有以10开始的字节，都不是每个UNICODE的第一个字节，都是紧跟着前一位。
   e.g.10110101，这个字节不可以单独解析，必须通过前一个字节来解析，如果前一个也是10开头，就继续前嗍。

（3）所有以11开始的字节，都表示是UNICODE的第一个字节，而且后面紧跟着若干个以10开头的字节。
   如果是110xxxxx（就是最左边的0的左边有2个1），代表后面还有1个10xxxxxx；
   如果是1110xxxx（就是最左边的0的左边有3个1），代表后面还有2个10xxxxxx；以此类推，一直到1111110x。 
 

