usge cmake CmakeLists.txt


如何组织

添加一个dir 中的所有文件
AUX_SOURCE_DIRECTORY 会查找指定ｄｉｒ下的所有源文件，将结果放到指定
的变量中
e.g. aux_source_directory(<dir> <varName>)
# 查找当前目录下的所有源文件
# 并将名称保存到 DIR_SRCS 变量
aux_source_directory(. DIR_SRCS)
# 指定生成目标
add_executable(Demo ${DIR_SRCS})

## build a lib
add_library(Name [STATIC | SHARED | MODULE]
            files)

## 
连结程式库的选择
指令 target_link_libraries()用于指定 target 所需要连结的项目，并且可以依不同组态选择不同的连结项目。
target_link_libraries(<target> [item1 [item2 [...]]]
                      [[debug|optimized|general] <item>] ...)

连结项目可以是另一个 target，或者是编译器能识别的程式库表示法，例如 gcc 会依照 -l 所指定的名称，寻找预设路径下由 lib 开头、附档名为.a的档案作为连结项目。

target_link_libraries(myapp
    debug -labc
    optimized -lxyz
    )

编译器选择
    SET (CMAKE_C_COMPILER             "/usr/bin/clang")
    SET (CMAKE_C_FLAGS                "-Wall -std=c99")
    SET (CMAKE_C_FLAGS_DEBUG          "-g")
    SET (CMAKE_C_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
    SET (CMAKE_C_FLAGS_RELEASE        "-O4 -DNDEBUG")
    SET (CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g")

    SET (CMAKE_CXX_COMPILER             "/usr/bin/clang++")
    SET (CMAKE_CXX_FLAGS                "-Wall")
    SET (CMAKE_CXX_FLAGS_DEBUG          "-g")
    SET (CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
    SET (CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
    SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")

    SET (CMAKE_AR      "/usr/bin/llvm-ar")
    SET (CMAKE_LINKER  "/usr/bin/llvm-ld")
    SET (CMAKE_NM      "/usr/bin/llvm-nm")
    SET (CMAKE_OBJDUMP "/usr/bin/llvm-objdump")
    SET (CMAKE_RANLIB  "/usr/bin/llvm-ranlib")

EE 
option(USE_CHIPMUNK "Use chipmunk for physics library" ON)

给USE_CHIPMUNK 变量定义一个默认值 ON or OFF

只有在option 后此变量才可使用F
主要配合
if 语句做条件编译

这些通过option 设置的变量是CMake 变量
使用 cmake -D<var>=<val> 来设置变量的值
* 使用 make edit_cache 来编辑和修改这些变量


EE add header file path like -I

include_directories(
  /usr/include
  /usr/include/GLFW
)

EE add lib path
link_directories(
)

EE 
怎样添加编译宏定义
使用add_definitions命令，见命令部分说明 


EE
include 引入一个文件
 e.g.
include(cocos2d-x/build/BuildHelpers.CMakeLists.txt)

>> 使用add_definitions命令，见命令部分说明 

EE CMAKE useful variables
----------------------------------------

UNIX 
    is TRUE on all UNIX-like OS's, including Apple OS X and CygWin 
WIN32 
    is TRUE on Windows. Prior to 2.8.4 this included CygWin 
APPLE 
    is TRUE on Apple systems. Note this does not imply the system is Mac OS X, only that __APPLE__ is #defined in C/C++ header files. Obtain more specific system information via CMAKE_SYSTEM_VERSION, i.e. IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin"), then it's Mac OS X. 
MINGW 
    is TRUE when using the MinGW compiler in Windows 
MSYS 
    is TRUE when using the MSYS developer environment in Windows 
CYGWIN 
    is TRUE on Windows when using the CygWin version of cmake 
BORLAND 
    is TRUE on Windows when using a Borland compiler 
WATCOM 
    is TRUE on Windows when using the Open Watcom compiler 
MSVC, MSVC_IDE, MSVC60, MSVC70, MSVC71, MSVC80, CMAKE_COMPILER_2005, MSVC90, MSVC10 (Visual Studio 2010) 
    Microsoft compiler 
CMAKE_C_COMPILER_ID 
    one of "Clang", "GNU", "Intel", or "MSVC". This works even if a compiler wrapper like ccache is used. 
CMAKE_CXX_COMPILER_ID 
    one of "Clang", "GNU", "Intel", or "MSVC". This works even if a compiler wrapper like ccache is used. 
CMAKE_COMPILER_IS_GNUCC 
    is TRUE if the compiler is a variant of gcc 
CMAKE_COMPILER_IS_GNUCXX 
    is TRUE if the compiler is a variant of g++ 



EE  architecture  判断32/64
if ( CMAKE_SIZEOF_VOID_P EQUAL 8 )
set(ARCH_DIR "64-bit")
else()
set(ARCH_DIR "32-bit")
endif()

